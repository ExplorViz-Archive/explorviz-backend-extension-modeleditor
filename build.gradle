apply plugin: 'java-library'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'war'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.plugin-shadow'
apply plugin: 'java'

buildscript {
    repositories {
    jcenter()
    }
    dependencies {
       classpath 'org.akhikhl.gretty:gretty:+'
       classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}


repositories {
  jcenter()
  maven { url 'https://jitpack.io' }
  
  // used for kieker and teetime snapshots
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}


//# Uncomment lines below to force dependency downloading (e.g. when explorviz-backend was updated)
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
	provided
	compile.extendsFrom(provided)
}


dependencies {


  	// Core logic
  	compile 'com.github.ExplorViz:explorviz-backend:master-SNAPSHOT'
	// local linking (explorviz backend project)
	//compile project(':explorviz-backend')
	//compile project(':explorviz-backend-kiekeradapter')
  
 	// Dependency for this subproject. Add your dependencies in the same way.
  	provided group: 'de.sven-jacobs', name: 'loremipsum', version: '1.0'


	shadow 'junit:junit:3.8.2'


    testCompile 'junit:junit:4.12'
}


// Don't build war when tests fail
//war.dependsOn check


// War plugin typically disables jar build
assemble.dependsOn jar

// Build .jar file with your "provided" dependencies only
jar {
manifest{
	attributes 'Class-Path' : '/libs/a.jar'
}
  baseName = project.name 
  from configurations.provided.asFileTree.files.collect { zipTree(it) }
}

install {
  repositories {
    mavenInstaller {
      addFilter('explorviz-backend-extension-modeleditor') {artifact, file ->
        artifact.name == 'explorviz-backend-extension-modeleditor'
      }
    }
  }
}


// Tooling
pmd {
	ignoreFailures = true
	// Clear the rule set first. Otherwise we would have a lot of additional rules in our rule set.
	ruleSets = []
	ruleSetFiles = files("conf/pmd.xml")
}

    
checkstyle {
	ignoreFailures = true
	showViolations = false
	configFile = file("conf/checkstyle.xml")
}

findbugs {
	reportLevel = "low"
	ignoreFailures = true
	effort = "max"
}


// Renaming Dummy task
// Run with ./gradlew renameProject -PextensionName="X"
task renameProject(type: Copy) {
  if (project.hasProperty('extensionName')) {

    // relative copy destinationDir
    into "."

    // Rename dummy package and replace dummy string import declarations

    def newExtensionName = project.property('extensionName')
    def javaSrc = 'src/main/java/net/explorviz/extension/'

    from(javaSrc + 'dummy') {
      filter{ it.replaceAll("\\.dummy\\.", "\\." + newExtensionName + "\\.")}
      into javaSrc + newExtensionName
    }    

    // Replace dummy string in settings.gradle
    String file = new File("settings.gradle").getText("UTF-8")
    file = file.replaceAll("-dummy", "-" + newExtensionName)
    new File("settings.gradle").write(file, "UTF-8")

    // Replace dummy string in .project
    file = new File(".project").getText("UTF-8")
    file = file.replaceAll("-dummy", "-" + newExtensionName)
    new File(".project").write(file, "UTF-8")

    doLast {
      delete javaSrc + 'dummy'
    }
  }
}


// Embedded Webserver
gretty {
  httpPort = 8081
  servletContainer = 'jetty9'
  contextPath = '/'
  recompileOnSourceChange = false
  reloadOnClassChange = false
  reloadOnConfigChange = false
  reloadOnLibChange = false
}
